[{"E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\index.js":"1","E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\reportWebVitals.js":"2","E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\App.js":"3","E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\input.js":"4","E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\header.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":1202,"mtime":1610530303551,"results":"9","hashOfConfig":"7"},{"size":497,"mtime":1610529264896,"results":"10","hashOfConfig":"7"},{"size":394,"mtime":1610530553570,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16b1pw5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\index.js",[],["25","26"],"E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\reportWebVitals.js",[],"E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from \"react\"; \nimport Header from './header';\nimport Input from './input';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n     name:\"Accolite Digitals\"\n    };\n    this.headerRef =  React.createRef();\n    // this.changeName=this.changeName.bind(this);\n\n    \n    // setTimeout(()=>{\n    //   // this.state.name = \"ACC\";\n    //   console.log( this.state.name)\n    //   this.setState({name:\"ACC\"});\n    // },2000);\n  }\n  \n  handleOnChange = (name) => {\n\n    // this.setState({name:myname});\n    this.headerRef.current.handleOnChange(name) //only this will cause rerendering  not this.name= name\n    console.log(this.name);\n  }\n  // componentDidMount(){}\n  // shouldComponentUpdate(prev,next){\n  //   return !(this.state.name == next.name)\n  // }\n  // componentDidUpdate(){}\n  // componentWillUnmount(){}\n  render(){\n    \n    return (\n      <>\n          {/* <h1> Hello {this.state.name}</h1>\n          <button onClick={this.changeName}></button> */}\n          <Header ref={this.headerRef}/>\n          <Input handleOnChange={this.handleOnChange}/>\n      </>\n      \n    );\n  }\n}\n\nexport default App;\n","E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\input.js",["28"],"import React, { Component } from \"react\";\r\n\r\nclass Input extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    changeName=(event)=>\r\n    {\r\n        this.props.handleOnChange(event.target.value);\r\n    }\r\n    render() {\r\n        // this.props.changeName;\r\n        return (\r\n            <div>\r\n                <h2>Input</h2>\r\n                <input onChange={this.changeName} type=\"text\" placeholder=\"Name\"></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","E:\\Accolite\\Spring-AU\\Spring Lab\\React-13-01\\springau\\src\\header.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":4,"column":5,"nodeType":"39","messageId":"40","endLine":6,"endColumn":6},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]